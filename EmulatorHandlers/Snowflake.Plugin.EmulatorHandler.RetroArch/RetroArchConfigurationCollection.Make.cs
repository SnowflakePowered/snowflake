using Snowflake.Configuration;
using Snowflake.Plugin.EmulatorHandler.RetroArch.Configuration;
using Snowflake.Plugin.EmulatorHandler.RetroArch.Configuration.Internal;

namespace Snowflake.Plugin.EmulatorHandler.RetroArch
{
    //autogenerated using generate_retroarch.py
    public partial class RetroArchConfiguration
    {
        public static RetroArchConfiguration MakeDefault()
        {
            var config = new RetroArchConfiguration();
            config.Add<BuiltinConfiguration, RetroArchConfigSerializer>("builtin", new BuiltinConfiguration());
            config.Add<MenuConfiguration, RetroArchConfigSerializer>("menu", new MenuConfiguration());
            config.Add<GameConfiguration, RetroArchConfigSerializer>("game", new GameConfiguration());
            config.Add<RecordConfiguration, RetroArchConfigSerializer>("record", new RecordConfiguration());
            config.Add<PauseConfiguration, RetroArchConfigSerializer>("pause", new PauseConfiguration());
            config.Add<LocationConfiguration, RetroArchConfigSerializer>("location", new LocationConfiguration());
            config.Add<NetworkConfiguration, RetroArchConfigSerializer>("network", new NetworkConfiguration());
            config.Add<LogConfiguration, RetroArchConfigSerializer>("log", new LogConfiguration());
            config.Add<InputConfiguration, RetroArchConfigSerializer>("input", new InputConfiguration());
            config.Add<NetplayConfiguration, RetroArchConfigSerializer>("netplay", new NetplayConfiguration());
            config.Add<XmbConfiguration, RetroArchConfigSerializer>("xmb", new XmbConfiguration());
            config.Add<StdinConfiguration, RetroArchConfigSerializer>("stdin", new StdinConfiguration());
            config.Add<CoreConfiguration, RetroArchConfigSerializer>("core", new CoreConfiguration());
            config.Add<CameraConfiguration, RetroArchConfigSerializer>("camera", new CameraConfiguration());
            config.Add<BundleConfiguration, RetroArchConfigSerializer>("bundle", new BundleConfiguration());
            config.Add<SaveConfiguration, RetroArchConfigSerializer>("save", new SaveConfiguration());
            config.Add<UserConfiguration, RetroArchConfigSerializer>("user", new UserConfiguration());
            config.Add<ThreadedConfiguration, RetroArchConfigSerializer>("threaded", new ThreadedConfiguration());
            config.Add<DirectoryConfiguration, RetroArchConfigSerializer>("directory", new DirectoryConfiguration());
            config.Add<UiConfiguration, RetroArchConfigSerializer>("ui", new UiConfiguration());
            config.Add<FramethrottleConfiguration, RetroArchConfigSerializer>("framethrottle",
                new FramethrottleConfiguration());
            config.Add<ConfigConfiguration, RetroArchConfigSerializer>("config", new ConfigConfiguration());
            config.Add<RewindConfiguration, RetroArchConfigSerializer>("rewind", new RewindConfiguration());
            return config;
        }
    }
}

