<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Snowflake.Framework</name>
    </assembly>
    <members>
        <member name="P:Snowflake.Configuration.ConfigurationCollection`1.Configuration">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Configuration.ConfigurationCollection`1.Descriptor">
            <inheritdoc/>
        </member>
        <member name="M:Snowflake.Configuration.ConfigurationCollection`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Snowflake.Configuration.ConfigurationCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Snowflake.Configuration.ConfigurationCollection`1.GetSection(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Snowflake.Configuration.ConfigurationCollectionDescriptor`1">
            <summary>
            Default implementation for <see cref="T:Snowflake.Configuration.IConfigurationCollectionDescriptor"/>
            </summary>
            <typeparam name="T">The type of the configuration collection</typeparam>
        </member>
        <member name="P:Snowflake.Configuration.ConfigurationCollectionDescriptor`1.SectionKeys">
            <inheritdoc/>
        </member>
        <member name="T:Snowflake.Configuration.ConfigurationDescriptorCache">
            <summary>
            Provides a thread-safe cache for collection descriptors.
            Since descriptors use heavy attribute access, the descriptor cache caches
            the attributes for types that will not change throughout the
            lifetime of the application.
            </summary>
        </member>
        <member name="M:Snowflake.Configuration.ConfigurationDescriptorCache.GetSectionDescriptor``1(System.String)">
            <summary>
            Gets a new or existing section descriptor
            </summary>
            <typeparam name="T">The type of the configuration section</typeparam>
            <returns>The section descriptor for <see cref="T:self"/></returns>
        </member>
        <member name="M:Snowflake.Configuration.ConfigurationDescriptorCache.GetCollectionDescriptor``1">
            <summary>
            Gets a new or existing collection descriptor
            </summary>
            <typeparam name="T">The type of the configuration collection</typeparam>
            <returns>The collection descriptor for <see cref="T:self"/></returns>
        </member>
        <member name="T:Snowflake.Configuration.ConfigurationOptionDescriptor">
            <summary>
            Default constructor for <see cref="T:Snowflake.Configuration.IConfigurationOptionDescriptor"/>
            </summary>
        </member>
        <member name="P:Snowflake.Configuration.ConfigurationOptionDescriptor.DisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Configuration.ConfigurationOptionDescriptor.Description">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Configuration.ConfigurationOptionDescriptor.Simple">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Configuration.ConfigurationOptionDescriptor.Private">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Configuration.ConfigurationOptionDescriptor.IsFlag">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Configuration.ConfigurationOptionDescriptor.Max">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Configuration.ConfigurationOptionDescriptor.Min">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Configuration.ConfigurationOptionDescriptor.Increment">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Configuration.ConfigurationOptionDescriptor.IsPath">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Configuration.ConfigurationOptionDescriptor.PathType">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Configuration.ConfigurationOptionDescriptor.OptionName">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Configuration.ConfigurationOptionDescriptor.OptionKey">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Configuration.ConfigurationOptionDescriptor.Default">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Configuration.ConfigurationOptionDescriptor.IsSelection">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Configuration.ConfigurationOptionDescriptor.Type">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Configuration.ConfigurationOptionDescriptor.Unset">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Configuration.ConfigurationOptionDescriptor.CustomMetadata">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Configuration.ConfigurationOptionDescriptor.OptionType">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Configuration.ConfigurationOptionDescriptor.SelectionOptions">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Configuration.ConfigurationOptionDescriptor.RootPath">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Configuration.ConfigurationOptionDescriptor.Filter">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Configuration.ConfigurationOptionDescriptor.ResourceType">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Configuration.ConfigurationSection`1.Configuration">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Configuration.ConfigurationSection`1.Descriptor">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Configuration.ConfigurationSection`1.Values">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Configuration.ConfigurationSection`1.Item(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Snowflake.Configuration.ConfigurationSection`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Snowflake.Configuration.ConfigurationSection`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:Snowflake.Configuration.ConfigurationSectionDescriptor`1">
            <summary>
            Default constructor for <see cref="T:Snowflake.Configuration.IConfigurationSectionDescriptor"/>
            </summary>
            <typeparam name="T">The type of the configuration.</typeparam>
        </member>
        <member name="P:Snowflake.Configuration.ConfigurationSectionDescriptor.Description">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Configuration.ConfigurationSectionDescriptor.DisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Configuration.ConfigurationSectionDescriptor.SectionName">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Configuration.ConfigurationSectionDescriptor.SectionKey">
            <inheritdoc />
        </member>
        <member name="P:Snowflake.Configuration.ConfigurationSectionDescriptor.Options">
            <inheritdoc />
        </member>
        <member name="P:Snowflake.Configuration.ConfigurationSectionDescriptor.Item(System.String)">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Configuration.ConfigurationValue.Value">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Configuration.ConfigurationValue.Guid">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Configuration.ConfigurationValueCollection.EnsuredDescriptors">
            <summary>
            Cache of ensured descriptors
            </summary>
        </member>
        <member name="T:Snowflake.Configuration.Input.DictionaryInputMapping">
            <summary>
            A JSON deseriazable input mapping backed by a simple dictionary lookup.
            </summary>
        </member>
        <member name="P:Snowflake.Configuration.Input.DictionaryInputMapping.Item(Snowflake.Input.Device.DeviceCapability)">
            <inheritdoc/>
        </member>
        <member name="M:Snowflake.Configuration.Input.DictionaryInputMapping.#ctor(Snowflake.Input.Device.InputDriver,System.Collections.Generic.IDictionary{Snowflake.Input.Device.DeviceCapability,System.String})">
            <summary>
            Instantiate an input mapping with the given dictionary of mappings.
            </summary>
            <param name="driver">The input driver used with this mapping.</param>
            <param name="elementMappings">The dictionary of mappings from <see cref="T:Snowflake.Input.Device.DeviceCapability"/> to input configuration string.</param>
        </member>
        <member name="P:Snowflake.Configuration.Input.InputConfiguration`1.PlayerIndex">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Configuration.Input.InputConfiguration`1.Configuration">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Configuration.Input.InputConfiguration`1.Values">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Configuration.Input.InputConfiguration`1.Snowflake#Configuration#Input#IInputConfiguration#Options">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Configuration.Input.InputConfiguration`1.Item(Snowflake.Input.Controller.ControllerElement)">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Configuration.Input.InputConfiguration`1.Snowflake#Configuration#IConfigurationSection#Values">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Configuration.Input.InputConfiguration`1.Snowflake#Configuration#IConfigurationSection#Descriptor">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Configuration.Input.InputConfiguration`1.Snowflake#Configuration#IConfigurationSection#Item(System.String)">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Configuration.Input.InputConfiguration`1.ValueCollection">
            <inheritdoc/>
        </member>
        <member name="M:Snowflake.Configuration.Input.InputConfiguration`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Configuration.Input.InputOption.OptionType">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Configuration.Input.InputOption.TargetElement">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Configuration.Input.InputOption.OptionName">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Configuration.Input.InputOption.KeyName">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Configuration.SelectionOptionDescriptor.DisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Configuration.SelectionOptionDescriptor.Private">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Configuration.SelectionOptionDescriptor.SerializeAs">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Configuration.SelectionOptionDescriptor.NumericValue">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Configuration.SelectionOptionDescriptor.EnumName">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Configuration.SelectionOptionDescriptor.EnumType">
            <inheritdoc/>
        </member>
        <member name="T:Snowflake.Configuration.Serialization.ConfigurationTarget">
            <summary>
            Defines a unit of a <see cref="T:Snowflake.Configuration.IConfigurationCollection`1"/> that will be
            evaluated independently into a tree of <see cref="T:Snowflake.Configuration.Serialization.IAbstractConfigurationNode"/>
            that will be evaluated and produce an output or side effects.
            </summary>
        </member>
        <member name="T:Snowflake.Configuration.Serialization.ConfigurationTraversalContext">
            <inheritdoc />
        </member>
        <member name="F:Snowflake.Configuration.Serialization.ConfigurationTraversalContext.NullTarget">
            <summary>
            Special string for the null target that is never serialized.
            </summary>
        </member>
        <member name="M:Snowflake.Configuration.Serialization.ConfigurationTraversalContext.#ctor(System.ValueTuple{System.String,Snowflake.Filesystem.IReadOnlyDirectory}[])">
            <summary>
            Creates a traversal context with the given path resolutions.
            
            Use the syntax
            <code>
            new ConfigurationTraversalContext(("drive", myDirectory), ("drive2", my2ndDirectory));
            </code>
            </summary>
            <param name="pathResolutionContext">
            A list of tuples of strings and <see cref="T:Snowflake.Filesystem.IReadOnlyDirectory"/> that specify each
            namespaced path.
            </param>
        </member>
        <member name="M:Snowflake.Configuration.Serialization.ConfigurationTraversalContext.#ctor(System.Collections.Generic.IDictionary{System.String,Snowflake.Filesystem.IReadOnlyDirectory})">
            <summary>
            Creates a traversal context with the given path resolutions.
            </summary>
            <param name="pathResolutionContext">The path resolutions supplied as a dictionary.</param>
        </member>
        <member name="T:Snowflake.Configuration.Serialization.ConfigurationTreeVisitor">
            <summary>
            Implements a stateless immutable <see cref="T:Snowflake.Configuration.Serialization.IConfigurationVisitor`1"/> with visitor semantics
            to reshape a <see cref="T:Snowflake.Configuration.Serialization.IAbstractConfigurationNode"/> returned by <see cref="T:Snowflake.Configuration.Serialization.IConfigurationTraversalContext"/>
            or another <see cref = "T:Snowflake.Configuration.Serialization.ConfigurationTreeVisitor"/>. Implementations of Visit should never return <see langword="null"/>.
            
            <para>
            By convention, returning a <see cref="T:Snowflake.Configuration.Serialization.NilConfigurationNode"/> should remove the node from the tree. <strong>This should especially be checked if implementing
            <see cref="M:Snowflake.Configuration.Serialization.ConfigurationTreeVisitor.Visit(Snowflake.Configuration.Serialization.ListConfigurationNode)"/>.</strong> 
            </para>
            </summary>
        </member>
        <member name="T:Snowflake.Configuration.Serialization.BooleanConfigurationNode">
            <summary>
            A configuration node that represents a terminal <see cref="T:System.Boolean"/> value.
            </summary>
        </member>
        <member name="T:Snowflake.Configuration.Serialization.DecimalConfigurationNode">
            <summary>
            A configuration node that represents a terminal <see cref="T:System.Decimal"/> value.
            </summary>
        </member>
        <member name="T:Snowflake.Configuration.Serialization.DeviceCapabilityElementConfigurationNode">
            <summary>
            A configuration node that represents a terminal <see cref="T:Snowflake.Input.Device.DeviceCapability"/> value.
            </summary>
        </member>
        <member name="T:Snowflake.Configuration.Serialization.EnumConfigurationNode">
            <summary>
            A configuration node that represents a terminal <see cref="T:System.Enum"/> value.
            </summary>
        </member>
        <member name="T:Snowflake.Configuration.Serialization.IntegralConfigurationNode">
            <summary>
            A configuration node that represents a terminal <see cref="T:System.Int64"/> integral value.
            </summary>
        </member>
        <member name="T:Snowflake.Configuration.Serialization.ListConfigurationNode">
            <summary>
            A configuration node that represents a n-ary list of nested child nodes.
            </summary>
        </member>
        <member name="T:Snowflake.Configuration.Serialization.NilConfigurationNode">
            <summary>
            Represents the lack of a configuration node. A fully parsed and visited tree should never contain any 
            <see cref="T:Snowflake.Configuration.Serialization.NilConfigurationNode"/>.
            </summary>
        </member>
        <member name="T:Snowflake.Configuration.Serialization.StringConfigurationNode">
            <summary>
            A configuration node that represents a terminal <see cref="T:System.String"/> node.
            </summary>
        </member>
        <member name="T:Snowflake.Configuration.Serialization.UnknownConfigurationNode">
            <summary>
            A configuration node that represents a terminal node of unknown type.
            Most serializers will ignore this, and it is here for developer convenience.
            </summary>
        </member>
        <member name="T:Snowflake.Configuration.Serialization.Serializers.ConfigurationSerializer`1">
            <summary>
            Implements stateful <see cref="T:Snowflake.Configuration.Serialization.IConfigurationVisitor`1"/> with serialization semantics into some
            string or binary format.
            </summary>
            <typeparam name="T">The type of the serialized data after traversing the tree.</typeparam>
        </member>
        <member name="M:Snowflake.Configuration.Serialization.Serializers.ConfigurationSerializer`1.Visit(Snowflake.Configuration.Serialization.IAbstractConfigurationNode)">
            <inheritdoc />
        </member>
        <member name="M:Snowflake.Configuration.Serialization.Serializers.ConfigurationSerializer`1.SerializeHeader(Snowflake.Configuration.Serialization.IConfigurationSerializationContext{`0})">
            <summary>
            Write the header to the serialized stream.
            </summary>
            <param name="context">The serialization context.</param>
        </member>
        <member name="M:Snowflake.Configuration.Serialization.Serializers.ConfigurationSerializer`1.SerializeFooter(Snowflake.Configuration.Serialization.IConfigurationSerializationContext{`0})">
            <summary>
            Write the header to the serialized stream.
            </summary>
            <param name="context">The serialization context.</param>
        </member>
        <member name="M:Snowflake.Configuration.Serialization.Serializers.ConfigurationSerializer`1.SerializeNode(Snowflake.Configuration.Serialization.IAbstractConfigurationNode,Snowflake.Configuration.Serialization.IConfigurationSerializationContext{`0},System.Int32)">
            <summary>
            Serialize a <see cref="T:Snowflake.Configuration.Serialization.IAbstractConfigurationNode"/> with the given context.
            </summary>
            <param name="node">The node to serialize.</param>
            <param name="context">The serialization context.</param>
            <param name="index">The position or index of the given node within the current block in the context.</param>
        </member>
        <member name="M:Snowflake.Configuration.Serialization.Serializers.ConfigurationSerializer`1.SerializeBlockBegin(Snowflake.Configuration.Serialization.IConfigurationSerializationContext{`0},System.Int32)">
            <summary>
            Serialize a marker or header where a block or section begins in the serialized stream.
            </summary>
            <param name="context">The serialization context.</param>
            <param name="index">The position or index of the given node within the current block in the context.</param>
        </member>
        <member name="M:Snowflake.Configuration.Serialization.Serializers.ConfigurationSerializer`1.SerializeBlockEnd(Snowflake.Configuration.Serialization.IConfigurationSerializationContext{`0},System.Int32)">
            <summary>
            Serialize a marker or footer where a block or section ends in the serialized stream.
            </summary>
            <param name="context">The serialization context.</param>
            <param name="index">The position or index of the given node within the current block in the context.</param>
        </member>
        <member name="M:Snowflake.Configuration.Serialization.Serializers.ConfigurationSerializer`1.SerializeNode(Snowflake.Configuration.Serialization.ListConfigurationNode,Snowflake.Configuration.Serialization.IConfigurationSerializationContext{`0},System.Int32)">
            <summary>
            Serializes a list of configuration nodes.
            
            For each child node to be serialized, the index should be incremented. Serializing a list node will 
            enter a new block, and thus block headers and footers are written at the beginning and end of
            serialization of this node respectively.
            </summary>
            <param name="node">The list of configuration nodes represented as a <see cref="T:Snowflake.Configuration.Serialization.ListConfigurationNode"/></param>
            <param name="context">The serialization context.</param>
            <param name="index">The position or index of the given node within the current block in the context.</param>
        </member>
        <member name="M:Snowflake.Configuration.Serialization.Serializers.ConfigurationSerializer`1.SerializeNode(Snowflake.Configuration.Serialization.StringConfigurationNode,Snowflake.Configuration.Serialization.IConfigurationSerializationContext{`0},System.Int32)">
            <summary>
            Serializes a configuration node that encapsulates a <see cref="T:System.String"/>.
            </summary>
            <param name="node">The node to serialize.</param>
            <param name="context">The serialization context.</param>
            <param name="index">The position or index of the given node within the current block in the context.</param>
        </member>
        <member name="M:Snowflake.Configuration.Serialization.Serializers.ConfigurationSerializer`1.SerializeNode(Snowflake.Configuration.Serialization.BooleanConfigurationNode,Snowflake.Configuration.Serialization.IConfigurationSerializationContext{`0},System.Int32)">
            <summary>
            Serializes a configuration node that encapsulates a <see cref="T:System.Boolean"/>.
            </summary>
            <param name="node">The node to serialize.</param>
            <param name="context">The serialization context.</param>
            <param name="index">The position or index of the given node within the current block in the context.</param>
        </member>
        <member name="M:Snowflake.Configuration.Serialization.Serializers.ConfigurationSerializer`1.SerializeNode(Snowflake.Configuration.Serialization.IntegralConfigurationNode,Snowflake.Configuration.Serialization.IConfigurationSerializationContext{`0},System.Int32)">
            <summary>
            Serializes a configuration node that encapsulates an integral value, implemented as a <see cref="T:System.Int64"/>
            </summary>
            <param name="node">The node to serialize.</param>
            <param name="context">The serialization context.</param>
            <param name="index">The position or index of the given node within the current block in the context.</param>
        </member>
        <member name="M:Snowflake.Configuration.Serialization.Serializers.ConfigurationSerializer`1.SerializeNode(Snowflake.Configuration.Serialization.DecimalConfigurationNode,Snowflake.Configuration.Serialization.IConfigurationSerializationContext{`0},System.Int32)">
            <summary>
            Serializes a configuration node that encapsulates a decimal value, implemented as a <see cref="T:System.Double"/>.
            
            Contrary to the name, this is not implemented as a <see cref="T:System.Decimal"/>, and IEEE 754 floating point semantics
            for double precision floating point numbers should be taken into account.
            </summary>
            <param name="node">The node to serialize.</param>
            <param name="context">The serialization context.</param>
            <param name="index">The position or index of the given node within the current block in the context.</param>
        </member>
        <member name="M:Snowflake.Configuration.Serialization.Serializers.ConfigurationSerializer`1.SerializeNode(Snowflake.Configuration.Serialization.EnumConfigurationNode,Snowflake.Configuration.Serialization.IConfigurationSerializationContext{`0},System.Int32)">
            <summary>
            Serializes a configuration node that encapsulates an <see cref="T:System.Enum"/> value.
            </summary>
            <param name="node">The node to serialize.</param>
            <param name="context">The serialization context.</param>
            <param name="index">The position or index of the given node within the current block in the context.</param>
        </member>
        <member name="M:Snowflake.Configuration.Serialization.Serializers.ConfigurationSerializer`1.SerializeNode(Snowflake.Configuration.Serialization.DeviceCapabilityElementConfigurationNode,Snowflake.Configuration.Serialization.IConfigurationSerializationContext{`0},System.Int32)">
            <summary>
            Serializes a configuration node that encapsulates a <see cref="T:Snowflake.Input.Controller.ControllerElement"/>.
            
            This is only used when serializing syntax trees that came from <see cref="T:Snowflake.Configuration.Input.IInputConfiguration"/>.
            </summary>
            <param name="node">The node to serialize.</param>
            <param name="context">The serialization context.</param>
            <param name="index">The position or index of the given node within the current block in the context.</param>
        </member>
        <member name="M:Snowflake.Configuration.Serialization.Serializers.ConfigurationSerializer`1.SerializeNodeValue(System.Boolean,System.String,Snowflake.Configuration.Serialization.IConfigurationSerializationContext{`0},System.Int32)">
            <summary>
            Serializes the value of a <see cref="T:Snowflake.Configuration.Serialization.BooleanConfigurationNode"/>. Override this when implementing a serializer.
            </summary>
            <param name="value">The raw value of the node.</param>
            <param name="key">The key of the node.</param>
            <param name="context">The serialization context.</param>
            <param name="index">The position or index of the given node within the current block in the context.</param>
        </member>
        <member name="M:Snowflake.Configuration.Serialization.Serializers.ConfigurationSerializer`1.SerializeNodeValue(System.Double,System.String,Snowflake.Configuration.Serialization.IConfigurationSerializationContext{`0},System.Int32)">
            <summary>
            Serializes the value of a <see cref="T:Snowflake.Configuration.Serialization.DecimalConfigurationNode"/>. Override this when implementing a serializer.
            </summary>
            <param name="value">The raw value of the node.</param>
            <param name="key">The key of the node.</param>
            <param name="context">The serialization context.</param>
            <param name="index">The position or index of the given node within the current block in the context.</param>
        </member>
        <member name="M:Snowflake.Configuration.Serialization.Serializers.ConfigurationSerializer`1.SerializeNodeValue(System.Enum,System.String,System.String,Snowflake.Configuration.Serialization.IConfigurationSerializationContext{`0},System.Int32)">
            <summary>
            Serializes the value of a <see cref="T:Snowflake.Configuration.Serialization.EnumConfigurationNode"/>. Override this when implementing a serializer.
            </summary>
            <param name="enumValue">The value of the node as the <see cref="T:System.Enum"/> object.</param>
            <param name="value">The raw value of the node.</param>
            <param name="key">The key of the node.</param>
            <param name="context">The serialization context.</param>
            <param name="index">The position or index of the given node within the current block in the context.</param>
        </member>
        <member name="M:Snowflake.Configuration.Serialization.Serializers.ConfigurationSerializer`1.SerializeNodeValue(System.Int64,System.String,Snowflake.Configuration.Serialization.IConfigurationSerializationContext{`0},System.Int32)">
            <summary>
            Serializes the value of a <see cref="T:Snowflake.Configuration.Serialization.IntegralConfigurationNode"/>. Override this when implementing a serializer.
            </summary>
            <param name="value">The raw value of the node.</param>
            <param name="key">The key of the node.</param>
            <param name="context">The serialization context.</param>
            <param name="index">The position or index of the given node within the current block in the context.</param>
        </member>
        <member name="M:Snowflake.Configuration.Serialization.Serializers.ConfigurationSerializer`1.SerializeNodeValue(System.String,System.String,Snowflake.Configuration.Serialization.IConfigurationSerializationContext{`0},System.Int32)">
            <summary>
            Serializes the value of a <see cref="T:Snowflake.Configuration.Serialization.StringConfigurationNode"/>. Override this when implementing a serializer.
            </summary>
            <param name="value">The raw value of the node.</param>
            <param name="key">The key of the node.</param>
            <param name="context">The serialization context.</param>
            <param name="index">The position or index of the given node within the current block in the context.</param>
        </member>
        <member name="M:Snowflake.Configuration.Serialization.Serializers.ConfigurationSerializer`1.SerializerNodeValue(Snowflake.Input.Controller.ControllerElement,System.String,System.String,Snowflake.Configuration.Serialization.IConfigurationSerializationContext{`0},System.Int32)">
            <summary>
            Serializes the value of a <see cref="T:Snowflake.Configuration.Serialization.EnumConfigurationNode"/>. Override this when implementing a serializer.
            </summary>
            <param name="controllerElementValue">The value of the node</param>
            <param name="value">
            The raw value of the node as the string representation of the element consistent with the 
            <see cref="T:Snowflake.Configuration.Input.IDeviceInputMapping"/> the syntax tree was originally serialized with.</param>
            <param name="key">The key of the node.</param>
            <param name="context">The serialization context.</param>
            <param name="index">The position or index of the given node within the current block in the context.</param>
        </member>
        <member name="T:Snowflake.Extensibility.Queueing.AsyncJobQueue`1">
            <inheritdoc />
        </member>
        <member name="M:Snowflake.Extensibility.Queueing.AsyncJobQueue`1.#ctor(System.Boolean)">
            <summary>
            Creates a new asynchronous job queue.
            </summary>
            <param name="disposeEnumerable">If false, will not automatically remove the enumerable once the job is complete.</param>
        </member>
        <member name="M:Snowflake.Extensibility.Queueing.AsyncJobQueue`1.TryRemoveSource(System.Guid,System.Collections.Generic.IAsyncEnumerable{`0}@)">
            <inheritdoc />
        </member>
        <member name="T:Snowflake.Extensibility.Queueing.AsyncJobQueue`2">
            <inheritdoc />
        </member>
        <member name="M:Snowflake.Extensibility.Queueing.AsyncJobQueue`2.#ctor(System.Boolean)">
            <summary>
            Creates a new asynchronous job queue.
            </summary>
            <param name="disposeEnumerable">If false, will not automatically remove the enumerable once the job is complete.</param>
        </member>
        <member name="M:Snowflake.Extensibility.Queueing.AsyncJobQueue`2.Empty">
            <summary>
            The empty enumerator.
            </summary>
            <returns>An empty async enumerable</returns>
        </member>
        <member name="M:Snowflake.Extensibility.Queueing.AsyncJobQueue`2.GetNext(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Snowflake.Extensibility.Queueing.AsyncJobQueue`2.GetCurrent(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Snowflake.Extensibility.Queueing.AsyncJobQueue`2.QueueJob(`0)">
            <inheritdoc />
        </member>
        <member name="M:Snowflake.Extensibility.Queueing.AsyncJobQueue`2.QueueJob(`0,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Snowflake.Extensibility.Queueing.AsyncJobQueue`2.AsEnumerable(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Snowflake.Extensibility.Queueing.AsyncJobQueue`2.GetSource(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Snowflake.Extensibility.Queueing.AsyncJobQueue`2.TryRemoveSource(System.Guid,`0@)">
            <inheritdoc />
        </member>
        <member name="F:Snowflake.Extensibility.EmptyPluginConfiguration.EmptyConfiguration">
            <summary>
            The empty plugin configuration.
            </summary>
        </member>
        <member name="P:Snowflake.Extensibility.Provisioning.PluginProvision.Logger">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Extensibility.Provisioning.PluginProvision.Properties">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Extensibility.Provisioning.PluginProvision.Name">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Extensibility.Provisioning.PluginProvision.Description">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Extensibility.Provisioning.PluginProvision.Author">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Extensibility.Provisioning.PluginProvision.Version">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Extensibility.Provisioning.PluginProvision.ContentDirectory">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Extensibility.Provisioning.PluginProvision.ResourceDirectory">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Extensibility.Provisioning.PluginProvision.CommonResourceDirectory">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Extensibility.Provisioning.PluginProvision.DataDirectory">
            <inheritdoc />
        </member>
        <member name="P:Snowflake.Extensibility.Provisioning.PluginProvision.ConfigurationStore">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Extensibility.Provisioning.ProvisionedPlugin.Provision">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Extensibility.Provisioning.ProvisionedPlugin.Name">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Extensibility.Provisioning.ProvisionedPlugin.Author">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Extensibility.Provisioning.ProvisionedPlugin.Description">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Extensibility.Provisioning.ProvisionedPlugin.Version">
            <inheritdoc/>
        </member>
        <member name="M:Snowflake.Extensibility.Provisioning.ProvisionedPlugin.GetPluginConfiguration">
            <inheritdoc/>
        </member>
        <member name="M:Snowflake.Extensibility.Provisioning.ProvisionedPlugin.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Snowflake.Filesystem.DirectoryExtensions.CopyFromDirectory(Snowflake.Filesystem.IDirectory,Snowflake.Filesystem.IDirectory)">
            <summary>
            Copies all the files and directories from the source directory recursively into this directory.
            </summary>
            <param name="this">The destination directory.</param>
            <param name="source">The source directory.</param>
            <returns>An enumerable of copied files.</returns>
        </member>
        <member name="M:Snowflake.Filesystem.DirectoryExtensions.CopyFromDirectory(Snowflake.Filesystem.IDirectory,Snowflake.Filesystem.IDirectory,System.Boolean)">
            <summary>
            Copies all the files and directories from the source directory recursively into this directory.
            </summary>
            <param name="this">The destination directory.</param>
            <param name="source">The source directory.</param>
            <param name="overwrite">Whether or not to overwrite existing files.</param>
            <returns>An enumerable of copied files.</returns>
        </member>
        <member name="M:Snowflake.Filesystem.DirectoryExtensions.CopyFromDirectory(Snowflake.Filesystem.IDirectory,Snowflake.Filesystem.IReadOnlyDirectory)">
            <summary>
            Copies all the files and directories from the source directory recursively into this directory.
            </summary>
            <param name="this">The destination directory.</param>
            <param name="source">The source directory.</param>
            <returns>An enumerable of copied files.</returns>
        </member>
        <member name="M:Snowflake.Filesystem.DirectoryExtensions.CopyFromDirectory(Snowflake.Filesystem.IDirectory,Snowflake.Filesystem.IReadOnlyDirectory,System.Boolean)">
            <summary>
            Copies all the files and directories from the source directory recursively into this directory.
            </summary>
            <param name="this">The destination directory.</param>
            <param name="source">The source directory.</param>
            <param name="overwrite">Whether or not to overwrite existing files.</param>
            <returns>An enumerable of copied files.</returns>
        </member>
        <member name="M:Snowflake.Filesystem.FileExtensions.ReadAllText(Snowflake.Filesystem.IReadOnlyFile)">
            <summary>
            Opens a text file, reads all the text in the file into a string, and then closes the opened stream.
            The default encoding is UTF8.
            </summary>
            <param name="this">The <see cref="T:Snowflake.Filesystem.IFile"/> to read.</param>
            <returns>A string containing all text in the file.</returns>
        </member>
        <member name="M:Snowflake.Filesystem.FileExtensions.ReadAllText(Snowflake.Filesystem.IReadOnlyFile,System.Text.Encoding)">
            <summary>
            Opens a text file, reads all the text in the file into a string with the specified encoding,
            and then closes the opened stream.
            </summary>
            <param name="this">The <see cref="T:Snowflake.Filesystem.IFile"/> to read.</param>
            <param name="encoding">The encoding applied to the contents of the file.</param>
            <returns>A string containing all text in the file.</returns>
        </member>
        <member name="M:Snowflake.Filesystem.FileExtensions.WriteAllText(Snowflake.Filesystem.IFile,System.String)">
            <summary>
            Opens a text file, writes all the text in the file into a string, and then closes the opened stream.
            The default encoding is UTF8.
            
            If the file already exists, it is overwritten.
            </summary>
            <param name="this">The <see cref="T:Snowflake.Filesystem.IFile"/> to read.</param>
            <param name="contents">The contents to write to file.</param>
            <returns>A string containing all text in the file.</returns>
        </member>
        <member name="M:Snowflake.Filesystem.FileExtensions.WriteAllTextAsync(Snowflake.Filesystem.IFile,System.String)">
            <summary>
            Opens a text file, writes all the text in the file into a string asynchronously, and then closes the opened stream.
            The default encoding is UTF8.
            
            If the file already exists, it is overwritten.
            </summary>
            <param name="this">The <see cref="T:Snowflake.Filesystem.IFile"/> to read.</param>
            <param name="contents">The contents to write to file.</param>
            <returns>A string containing all text in the file.</returns>
        </member>
        <member name="M:Snowflake.Filesystem.FileExtensions.WriteAllText(Snowflake.Filesystem.IFile,System.String,System.Text.Encoding)">
            <summary>
            Opens a text file, writes all the text in the file into a string with the specified encoding,
            and then closes the opened stream. If the file already exists, it is overwritten.
            </summary>
            <param name="this">The <see cref="T:Snowflake.Filesystem.IFile"/> to read.</param>
            <param name="contents">The contents to write to file.</param>
            <param name="encoding">The encoding applied to the contents of the file.</param>
            <returns>A string containing all text in the file.</returns>
        </member>
        <member name="M:Snowflake.Filesystem.FileExtensions.WriteAllTextAsync(Snowflake.Filesystem.IFile,System.String,System.Text.Encoding)">
            <summary>
            Opens a text file, writes all the text in the file into a string with the specified encoding,
            and then closes the opened stream. If the file already exists, it is overwritten.
            </summary>
            <param name="this">The <see cref="T:Snowflake.Filesystem.IFile"/> to read.</param>
            <param name="contents">The contents to write to file.</param>
            <param name="encoding">The encoding applied to the contents of the file.</param>
            <returns>A string containing all text in the file.</returns>
        </member>
        <member name="M:Snowflake.Filesystem.FileSystemInfoExtensions.ContentExists(System.IO.FileInfo)">
            <summary>
            Gets a value indicating whether the specified file exists.
            Unlike <see cref="P:System.IO.FileInfo.Exists"/>, this method follows symbolic links.
            </summary>
            <param name="this">The <see cref="T:System.IO.FileInfo"/> representing the current file.</param>
            <returns><see langword="true"/> if the file exists on disk and is accessible, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Snowflake.Filesystem.FileSystemInfoExtensions.ContentExists(System.IO.DirectoryInfo)">
            <summary>
            Gets a value indicating whether the specified directory exists.
            Unlike <see cref="P:System.IO.DirectoryInfo.Exists"/>, this method follows symbolic links.
            </summary>
            <param name="this">The <see cref="T:System.IO.DirectoryInfo"/> representing the current file.</param>
            <returns><see langword="true"/> if the directory exists on disk and is accessible, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Snowflake.Filesystem.FileSystemInfoExtensions.Length(System.IO.FileInfo)">
            <summary>
            Gets the size, in bytes, of the current file.
            Unlike <see cref="P:System.IO.FileInfo.Length"/>, this method follows symbolic links.
            </summary>
            <param name="this">The <see cref="T:System.IO.FileInfo"/> representing the current file.</param>
            <returns>The size of the file in bytes, or -1 if the file does not exist or is a directory.</returns>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="T:Snowflake.Filesystem.IFileGuidProvider">
            <summary>
            Abstraction of GUID provisioning for <see cref="T:Snowflake.Filesystem.Directory"/>
            </summary>
        </member>
        <member name="M:Snowflake.Filesystem.IFileGuidProvider.TryGetGuid(System.IO.FileInfo,System.Guid@)">
            <summary>
            Tries to get a GUID for the file.
            </summary>
            <param name="rawInfo">The raw <see cref="T:System.IO.FileInfo"/> referring to the file on disk.</param>
            <param name="guid">The result GUID if it exists, or <see cref="F:System.Guid.Empty"/> if it does not.</param>
            <returns><see langword="true"/> if a GUID exists and is returned, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Snowflake.Filesystem.IFileGuidProvider.SetGuid(System.IO.FileInfo,System.Guid)">
            <summary>
            Sets a GUID for a file. 
            </summary>
            <param name="rawInfo">The raw <see cref="T:System.IO.FileInfo"/> referring to the file on disk.</param>
            <param name="guid">The result GUID if it exists, or <see cref="F:System.Guid.Empty"/> if it does not.</param>
        </member>
        <member name="P:Snowflake.Input.Controller.ControllerElementCollection.ButtonA">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Input.Controller.ControllerElementCollection.ButtonB">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Input.Controller.ControllerElementCollection.ButtonC">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Input.Controller.ControllerElementCollection.ButtonX">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Input.Controller.ControllerElementCollection.ButtonY">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Input.Controller.ControllerElementCollection.ButtonZ">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Input.Controller.ControllerElementCollection.ButtonL">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Input.Controller.ControllerElementCollection.ButtonR">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Input.Controller.ControllerElementCollection.ButtonStart">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Input.Controller.ControllerElementCollection.ButtonSelect">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Input.Controller.ControllerElementCollection.ButtonGuide">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Input.Controller.ControllerElementCollection.ButtonClickL">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Input.Controller.ControllerElementCollection.ButtonClickR">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Input.Controller.ControllerElementCollection.Button0">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Input.Controller.ControllerElementCollection.Button1">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Input.Controller.ControllerElementCollection.Button2">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Input.Controller.ControllerElementCollection.Button3">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Input.Controller.ControllerElementCollection.Button4">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Input.Controller.ControllerElementCollection.Button5">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Input.Controller.ControllerElementCollection.Button6">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Input.Controller.ControllerElementCollection.Button7">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Input.Controller.ControllerElementCollection.Button8">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Input.Controller.ControllerElementCollection.Button9">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Input.Controller.ControllerElementCollection.Button10">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Input.Controller.ControllerElementCollection.Button11">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Input.Controller.ControllerElementCollection.Button12">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Input.Controller.ControllerElementCollection.Button13">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Input.Controller.ControllerElementCollection.Button14">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Input.Controller.ControllerElementCollection.Button15">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Input.Controller.ControllerElementCollection.Button16">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Input.Controller.ControllerElementCollection.Button17">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Input.Controller.ControllerElementCollection.Button18">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Input.Controller.ControllerElementCollection.Button19">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Input.Controller.ControllerElementCollection.Button20">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Input.Controller.ControllerElementCollection.Button21">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Input.Controller.ControllerElementCollection.Button22">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Input.Controller.ControllerElementCollection.Button23">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Input.Controller.ControllerElementCollection.Button24">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Input.Controller.ControllerElementCollection.Button25">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Input.Controller.ControllerElementCollection.Button26">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Input.Controller.ControllerElementCollection.Button27">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Input.Controller.ControllerElementCollection.Button28">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Input.Controller.ControllerElementCollection.Button29">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Input.Controller.ControllerElementCollection.Button30">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Input.Controller.ControllerElementCollection.Button31">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Input.Controller.ControllerElementCollection.DirectionalN">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Input.Controller.ControllerElementCollection.DirectionalE">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Input.Controller.ControllerElementCollection.DirectionalS">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Input.Controller.ControllerElementCollection.DirectionalW">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Input.Controller.ControllerElementCollection.DirectionalNE">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Input.Controller.ControllerElementCollection.DirectionalNW">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Input.Controller.ControllerElementCollection.DirectionalSE">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Input.Controller.ControllerElementCollection.DirectionalSW">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Input.Controller.ControllerElementCollection.TriggerLeft">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Input.Controller.ControllerElementCollection.TriggerRight">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Input.Controller.ControllerElementCollection.AxisLeftAnalogPositiveX">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Input.Controller.ControllerElementCollection.AxisLeftAnalogNegativeX">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Input.Controller.ControllerElementCollection.AxisLeftAnalogPositiveY">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Input.Controller.ControllerElementCollection.AxisLeftAnalogNegativeY">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Input.Controller.ControllerElementCollection.AxisRightAnalogPositiveX">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Input.Controller.ControllerElementCollection.AxisRightAnalogNegativeX">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Input.Controller.ControllerElementCollection.AxisRightAnalogPositiveY">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Input.Controller.ControllerElementCollection.AxisRightAnalogNegativeY">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Input.Controller.ControllerElementCollection.RumbleBig">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Input.Controller.ControllerElementCollection.RumbleSmall">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Input.Controller.ControllerElementCollection.Pointer2D">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Input.Controller.ControllerElementCollection.Pointer3D">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Input.Controller.ControllerElementCollection.PointerAxisPositiveX">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Input.Controller.ControllerElementCollection.PointerAxisNegativeX">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Input.Controller.ControllerElementCollection.PointerAxisPositiveY">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Input.Controller.ControllerElementCollection.PointerAxisNegativeY">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Input.Controller.ControllerElementCollection.PointerAxisPositiveZ">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Input.Controller.ControllerElementCollection.PointerAxisNegativeZ">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Input.Controller.ControllerElementCollection.Keyboard">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Input.Controller.ControllerElementCollection.Touchscreen">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Input.Controller.ControllerElementCollection.Gyroscope">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Input.Controller.ControllerElementCollection.Item(Snowflake.Input.Controller.ControllerElement)">
            <inheritdoc/>
        </member>
        <member name="M:Snowflake.Input.Controller.ControllerElementCollection.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Snowflake.Input.Controller.ControllerElementCollection.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:Snowflake.Input.Controller.ControllerElementExtensions">
            <summary>
            Extensions to <see cref="T:Snowflake.Input.Controller.ControllerElement"/>
            </summary>
        </member>
        <member name="M:Snowflake.Input.Controller.ControllerElementExtensions.Parse(System.String)">
            <summary>
            Parses a <see cref="T:Snowflake.Input.Controller.ControllerElement"/> from a string.
            </summary>
            <param name="controllerElement">The string representation of the controller element.</param>
            <returns>A <see cref="T:Snowflake.Input.Controller.ControllerElement"/> parsed from the string.</returns>
            <exception cref="T:System.ArgumentException">If the string is unable to be parsed.</exception>
        </member>
        <member name="M:Snowflake.Input.Controller.ControllerElementExtensions.ToString(Snowflake.Input.Controller.ControllerElement)">
            <summary>
            Gets the string representation of the <see cref="T:Snowflake.Input.Controller.ControllerElement"/>.
            </summary>
            <param name="this">The <see cref="T:Snowflake.Input.Controller.ControllerElement"/> to parse.</param>
            <returns>The string representation of the <see cref="T:Snowflake.Input.Controller.ControllerElement"/>.</returns>
        </member>
        <member name="P:Snowflake.Input.Controller.ControllerElementInfo.Label">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Input.Controller.ControllerElementInfo.Type">
            <inheritdoc/>
        </member>
        <member name="M:Snowflake.Input.Controller.ControllerElementMappingProfile.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Snowflake.Input.Controller.ControllerElementMappingProfile.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Input.Controller.ControllerElementMappingProfile.DeviceName">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Input.Controller.ControllerElementMappingProfile.ControllerID">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Input.Controller.ControllerElementMappingProfile.DriverType">
            <inheritdoc />
        </member>
        <member name="P:Snowflake.Input.Controller.ControllerElementMappingProfile.VendorID">
            <inheritdoc />
        </member>
        <member name="P:Snowflake.Input.Controller.ControllerElementMappingProfile.ProfileGuid">
            <inheritdoc />
        </member>
        <member name="M:Snowflake.Input.Controller.ControllerElementMappingProfile.#ctor(System.String,Snowflake.Input.Controller.ControllerId,Snowflake.Input.Device.InputDriver,System.Int32,Snowflake.Input.Device.IDeviceLayoutMapping)">
            <summary>
            Initializes a <see cref="T:Snowflake.Input.Controller.ControllerElementMappingProfile"/> from an <see cref="T:Snowflake.Input.Device.IDeviceLayoutMapping"/>,
            that includes all mappings from the default layout.
            </summary>
            <param name="deviceName">The name of the physical device for this set of mappings.</param>
            <param name="controllerId">The Stone <see cref="P:Snowflake.Input.Controller.ControllerElementMappingProfile.ControllerID"/> this mapping is intended for.</param>
            <param name="driver">The <see cref="T:Snowflake.Input.Device.InputDriver"/> of the device instance for this set of mappings.</param>
            <param name="vendor">The vendor ID of the physical device for this set of mappings.</param>
            <param name="mapping">The device layout mapping provided by the device enumerator.</param>
            <param name="profileGuid">The <see cref="T:System.Guid"/> of this mapping profile.</param>
        </member>
        <member name="M:Snowflake.Input.Controller.ControllerElementMappingProfile.#ctor(System.String,Snowflake.Input.Controller.ControllerId,Snowflake.Input.Device.InputDriver,System.Int32,Snowflake.Input.Device.IDeviceLayoutMapping,System.Guid)">
            <summary>
            Initializes a <see cref="T:Snowflake.Input.Controller.ControllerElementMappingProfile"/> from an <see cref="T:Snowflake.Input.Device.IDeviceLayoutMapping"/>,
            that includes all mappings from the default layout.
            </summary>
            <param name="deviceName">The name of the physical device for this set of mappings.</param>
            <param name="controllerId">The Stone <see cref="P:Snowflake.Input.Controller.ControllerElementMappingProfile.ControllerID"/> this mapping is intended for.</param>
            <param name="driver">The <see cref="T:Snowflake.Input.Device.InputDriver"/> of the device instance for this set of mappings.</param>
            <param name="vendor">The vendor ID of the physical device for this set of mappings.</param>
            <param name="mapping">The device layout mapping provided by the device enumerator.</param>
            <param name="profileGuid">The <see cref="T:System.Guid"/> of this mapping profile.</param>
        </member>
        <member name="M:Snowflake.Input.Controller.ControllerElementMappingProfile.#ctor(System.String,Snowflake.Input.Controller.IControllerLayout,Snowflake.Input.Device.InputDriver,System.Int32,Snowflake.Input.Device.IDeviceLayoutMapping)">
            <summary>
            Initializes a<see cref= "T:Snowflake.Input.Controller.ControllerElementMappingProfile" /> from an <see cref="T:Snowflake.Input.Device.IDeviceLayoutMapping"/>,
            that includes only mappings that are assignable to the provided layout.
            </summary>
            <param name="deviceName">The name of the physical device for this set of mappings.</param>
            <param name="controller">The controller layout to assign device mappings to.</param>
            <param name="driver">The <see cref="T:Snowflake.Input.Device.InputDriver"/> of the device instance for this set of mappings.</param>
            <param name="vendor">The vendor ID of the physical device for this set of mappings.</param>
            <param name="mapping">The device layout mapping provided by the device enumerator.</param>
        </member>
        <member name="M:Snowflake.Input.Controller.ControllerElementMappingProfile.#ctor(System.String,Snowflake.Input.Controller.IControllerLayout,Snowflake.Input.Device.InputDriver,System.Int32,Snowflake.Input.Device.IDeviceLayoutMapping,System.Guid)">
            <summary>
            Initializes a<see cref= "T:Snowflake.Input.Controller.ControllerElementMappingProfile" /> from an <see cref="T:Snowflake.Input.Device.IDeviceLayoutMapping"/>,
            that includes only mappings that are assignable to the provided layout.
            </summary>
            <param name="deviceName">The name of the physical device for this set of mappings.</param>
            <param name="controller">The controller layout to assign device mappings to.</param>
            <param name="driver">The <see cref="T:Snowflake.Input.Device.InputDriver"/> of the device instance for this set of mappings.</param>
            <param name="vendor">The vendor ID of the physical device for this set of mappings.</param>
            <param name="mapping">The device layout mapping provided by the device enumerator.</param>
            <param name="profileGuid">The <see cref="T:System.Guid"/> of this mapping profile.</param>
        </member>
        <member name="T:Snowflake.Input.Controller.ControllerElementTypeExtensions">
            <summary>
            Extensions to <see cref="T:Snowflake.Input.Controller.ControllerElementType"/>
            </summary>
        </member>
        <member name="M:Snowflake.Input.Controller.ControllerElementTypeExtensions.Parse(System.String)">
            <summary>
            Parses a <see cref="T:Snowflake.Input.Controller.ControllerElementType"/> from a string.
            </summary>
            <param name="controllerElement">The string representation of the controller element.</param>
            <returns>A <see cref="T:Snowflake.Input.Controller.ControllerElementType"/> parsed from the string.</returns>
            <exception cref="T:System.ArgumentException">If the string is unable to be parsed.</exception>
        </member>
        <member name="M:Snowflake.Input.Controller.ControllerElementTypeExtensions.ToString(Snowflake.Input.Controller.ControllerElementType)">
            <summary>
            Gets the string representation of the <see cref="T:Snowflake.Input.Controller.ControllerElementType"/>.
            </summary>
            <param name="this">The <see cref="T:Snowflake.Input.Controller.ControllerElementType"/> to parse.</param>
            <returns>The string representation of the <see cref="T:Snowflake.Input.Controller.ControllerElementType"/>.</returns>
        </member>
        <member name="P:Snowflake.Input.Controller.ControllerLayout.ControllerID">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Input.Controller.ControllerLayout.FriendlyName">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Input.Controller.ControllerLayout.Platforms">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Input.Controller.ControllerLayout.Layout">
            <inheritdoc/>
        </member>
        <member name="T:Snowflake.Input.Device.DefaultDeviceCapabilityLabels">
            <summary>
            Implements a default label mapping using the name of the capability enum element.
            </summary>
        </member>
        <member name="P:Snowflake.Input.Device.DefaultDeviceCapabilityLabels.DefaultLabels">
            <summary>
            Default labels using the name of the capability enum element.
            </summary>
        </member>
        <member name="T:Snowflake.Input.Device.DeviceCapabilityExtensions">
            <summary>
            Extensions to <see cref="T:Snowflake.Input.Device.DeviceCapability"/>
            </summary>
        </member>
        <member name="M:Snowflake.Input.Device.DeviceCapabilityExtensions.GetClass(Snowflake.Input.Device.DeviceCapability)">
            <summary>
            Gets the capability class of this <see cref="T:Snowflake.Input.Device.DeviceCapability"/>
            </summary>
            <param name="this">The <see cref="T:Snowflake.Input.Device.DeviceCapability"/></param>
            <returns>The capability class of the capability.</returns>
        </member>
        <member name="T:Snowflake.Input.Device.DictionaryDeviceCapabilityLabels">
            <summary>
            Implements a label mapping using a backing dictionary. Missing labels are replaced with
            the empty string.
            </summary>
        </member>
        <member name="M:Snowflake.Input.Device.DictionaryDeviceCapabilityLabels.#ctor(System.Collections.Generic.IDictionary{Snowflake.Input.Device.DeviceCapability,System.String})">
            <summary>
            Create a new <see cref="T:Snowflake.Input.Device.IDeviceCapabilityLabels"/> using a backing dictionary.
            </summary>
            <param name="labels">The backing dictionary to use.</param>
        </member>
        <member name="T:Snowflake.Installation.Extensibility.GameInstaller">
            <inheritdoc cref="T:Snowflake.Installation.Extensibility.IGameInstaller" />
        </member>
        <member name="M:Snowflake.Installation.Extensibility.GameInstaller.#ctor(Snowflake.Extensibility.Provisioning.IPluginProvision)">
            <inheritdoc />
        </member>
        <member name="P:Snowflake.Installation.Extensibility.GameInstaller.SupportedPlatforms">
            <inheritdoc />
        </member>
        <member name="M:Snowflake.Installation.Extensibility.GameInstaller.GetInstallables(Snowflake.Model.Game.PlatformId,System.Collections.Generic.IEnumerable{System.IO.FileSystemInfo})">
            <inheritdoc />
        </member>
        <member name="M:Snowflake.Installation.Extensibility.GameInstaller.Install(Snowflake.Model.Game.IGame,System.Collections.Generic.IEnumerable{System.IO.FileSystemInfo},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Snowflake.Installation.Extensibility.Installable.#ctor(System.Collections.Generic.IEnumerable{System.IO.FileSystemInfo},System.IO.FileSystemInfo,Snowflake.Installation.Extensibility.IGameInstaller)">
            <summary>
            Creates an <see cref="T:Snowflake.Installation.Extensibility.IInstallable"/> with the provided artifacts and uses
            the file path as a display name.
            </summary>
            <param name="artifacts">The artifacts to install.</param>
            <param name="source">The source file system info of the installable.</param>
        </member>
        <member name="M:Snowflake.Installation.Extensibility.Installable.#ctor(System.Collections.Generic.IEnumerable{System.IO.FileSystemInfo},System.String,Snowflake.Installation.Extensibility.IGameInstaller)">
            <summary>
            Creates an <see cref="T:Snowflake.Installation.Extensibility.IInstallable"/> with the provided artifacts and display name.
            </summary>
            <param name="artifacts">The artifacts to install.</param>
            <param name="displayName">The display name of the installable.</param>
            <param name="gameInstaller">The installer that produced this installable.</param>
        </member>
        <member name="T:Snowflake.Installation.Tasks.CopyDirectoryContentsTask">
            <summary>
            Copies the descendant contents of the provided <see cref="T:System.IO.DirectoryInfo"/> into
            a desination <see cref="T:Snowflake.Filesystem.IDirectory"/>.
            </summary>
        </member>
        <member name="M:Snowflake.Installation.Tasks.CopyDirectoryContentsTask.#ctor(Snowflake.Installation.TaskResult{System.IO.DirectoryInfo},Snowflake.Filesystem.IDirectory)">
            <summary>
            Describe a directory copy with the provided source and
            destination directory.
            </summary>
            <param name="source">
            A <see cref="T:System.IO.DirectoryInfo"/> that may or may not be the result of a <see cref="T:Snowflake.Installation.AsyncInstallTask`1"/> 
            where T is <see cref="T:System.IO.DirectoryInfo"/>.
            </param>
            <param name="destinationDirectory">The destination <see cref="T:Snowflake.Filesystem.IDirectory"/>.</param>
        </member>
        <member name="T:Snowflake.Installation.Tasks.CopyFileTask">
            <summary>
            Copies a file into an <see cref="T:Snowflake.Filesystem.IDirectory"/>
            </summary>
        </member>
        <member name="M:Snowflake.Installation.Tasks.CopyFileTask.#ctor(Snowflake.Installation.TaskResult{System.IO.FileInfo},Snowflake.Filesystem.IDirectory)">
            <summary>
            Describe a file copy with the given source file and the target directory.
            The resultant file will have the same file name as the source.
            </summary>
            <param name="source">The source file.</param>
            <param name="destinationDirectory">The target directory.</param>
        </member>
        <member name="T:Snowflake.Installation.Tasks.ExecuteAsyncTask`1">
            <summary>
            Wraps a <see cref="T:System.Threading.Tasks.Task`1"/> into an <see cref="T:Snowflake.Installation.AsyncInstallTask`1"/>
            that yields <see cref="T:Snowflake.Installation.TaskResult`1"/>.
            </summary>
            <typeparam name="TResult">The return type of the task.</typeparam>
        </member>
        <member name="M:Snowflake.Installation.Tasks.ExecuteAsyncTask`1.#ctor(System.Threading.Tasks.Task{`0})">
            <summary>
            Describes the execution result of the supplied task as a <see cref="T:Snowflake.Installation.TaskResult`1"/>
            </summary>
            <param name="task">The task to execute.</param>
        </member>
        <member name="T:Snowflake.Installation.Tasks.ExtractZipTask">
            <summary>
            Extracts a ZIP file into a target directory.
            </summary>
        </member>
        <member name="M:Snowflake.Installation.Tasks.ExtractZipTask.#ctor(Snowflake.Installation.TaskResult{System.IO.FileInfo},Snowflake.Filesystem.IDirectory)">
            <summary>
            Describes an extraction of a ZIP file into a target directory.
            </summary>
            <param name="fileInfo">The ZIP file source.</param>
            <param name="destination">The destination directory.</param>
        </member>
        <member name="T:Snowflake.Installation.Tasks.FailureTask`1">
            <summary>
            Immediately fails the task by throwing an exception.
            </summary>
        </member>
        <member name="M:Snowflake.Installation.Tasks.FailureTask`1.#ctor(System.Exception)">
            <summary>
            Fails with the provided exception
            </summary>
            <param name="exception">The exception that occurred.</param>
        </member>
        <member name="M:Snowflake.Installation.Tasks.FailureTask`1.#ctor(System.String)">
            <summary>
            Fails with the provided message using a generic exception.
            </summary>
            <param name="message">The messsage to fail with.</param>
        </member>
        <member name="M:Snowflake.Installation.Tasks.FailureTask`1.#ctor(System.String,System.Exception)">
            <summary>
            Fails with the provided message using the provided exception.
            </summary>
            <param name="message">The messsage to fail with.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="P:Snowflake.Loader.Module.Name">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Loader.Module.Entry">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Loader.Module.Loader">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Loader.Module.Author">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Loader.Module.ModuleDirectory">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Loader.Module.ContentsDirectory">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Loader.Module.Version">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Loader.Module.DisplayName">
            <inheritdoc />
        </member>
        <member name="P:Snowflake.Loader.ModuleEnumerator.Modules">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Loader.ServiceProvider.Services">
            <inheritdoc/>
        </member>
        <member name="M:Snowflake.Loader.ServiceProvider.Get``1">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Model.Game.PlatformInfo.FriendlyName">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Model.Game.PlatformInfo.PlatformID">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Model.Game.PlatformInfo.Metadata">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Model.Game.PlatformInfo.FileTypes">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Model.Game.PlatformInfo.BiosFiles">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Model.Game.PlatformInfo.MaximumInputs">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Model.Records.FileRecord.Metadata">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Model.Records.FileRecord.RecordID">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Model.Records.FileRecord.MimeType">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Model.Records.MetadataCollection.Item(System.Guid)">
            <inheritdoc/>
        </member>
        <member name="M:Snowflake.Model.Records.MetadataCollection.Add(System.Collections.Generic.IDictionary{System.String,Snowflake.Model.Records.IRecordMetadata})">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Model.Records.MetadataCollection.Snowflake#Model#Records#IMetadataCollection#Item(System.String)">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Model.Records.MetadataCollection.Record">
            <inheritdoc/>
        </member>
        <member name="M:Snowflake.Model.Records.MetadataCollection.Add(Snowflake.Model.Records.IRecordMetadata)">
            <inheritdoc/>
        </member>
        <member name="M:Snowflake.Model.Records.MetadataCollection.Add(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Snowflake.Model.Records.RecordMetadata">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Model.Records.RecordMetadata.Key">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Model.Records.RecordMetadata.Value">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Model.Records.RecordMetadata.Guid">
            <inheritdoc/>
        </member>
        <member name="P:Snowflake.Model.Records.RecordMetadata.Record">
            <inheritdoc/>
        </member>
        <member name="M:Snowflake.Model.Records.RecordMetadata.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Snowflake.Model.Records.RecordMetadata.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:Snowflake.Model.Records.Utility.GuidCreator">
            <summary>
            Helper methods for working with <see cref="T:System.Guid"/>.
            </summary>
        </member>
        <member name="M:Snowflake.Model.Records.Utility.GuidCreator.Create(System.Guid,System.String)">
            <summary>
            Creates a name-based UUID using the algorithm from RFC 4122 §4.3.
            </summary>
            <param name="namespaceId">The ID of the namespace.</param>
            <param name="name">The name (within that namespace).</param>
            <returns>A UUID derived from the namespace and name.</returns>
            <remarks>See <a href="http://code.logos.com/blog/2011/04/generating_a_deterministic_guid.html">Generating a deterministic GUID</a>.</remarks>
        </member>
        <member name="M:Snowflake.Model.Records.Utility.GuidCreator.Create(System.Guid,System.String,System.Int32)">
            <summary>
            Creates a name-based UUID using the algorithm from RFC 4122 §4.3.
            </summary>
            <param name="namespaceId">The ID of the namespace.</param>
            <param name="name">The name (within that namespace).</param>
            <param name="version">The version number of the UUID to create; this value must be either
            3 (for MD5 hashing) or 5 (for SHA-1 hashing).</param>
            <returns>A UUID derived from the namespace and name.</returns>
            <remarks>See <a href="http://code.logos.com/blog/2011/04/generating_a_deterministic_guid.html">Generating a deterministic GUID</a>.</remarks>
        </member>
        <member name="F:Snowflake.Model.Records.Utility.GuidCreator.DnsNamespace">
            <summary>
            The namespace for fully-qualified domain names (from RFC 4122, Appendix C).
            </summary>
        </member>
        <member name="F:Snowflake.Model.Records.Utility.GuidCreator.UrlNamespace">
            <summary>
            The namespace for URLs (from RFC 4122, Appendix C).
            </summary>
        </member>
        <member name="F:Snowflake.Model.Records.Utility.GuidCreator.IsoOidNamespace">
            <summary>
            The namespace for ISO OIDs (from RFC 4122, Appendix C).
            </summary>
        </member>
        <member name="T:Snowflake.Support.StoreProviders.DesignTimeSqliteDbContextFactory">
            <summary>
            Used to provide an entry point for dotnet ef
            </summary>
        </member>
        <member name="M:Snowflake.Orchestration.Extensibility.Extensions.DeviceEnumeratorExtensions.IsPortDeviceConnected(Snowflake.Services.IDeviceEnumerator,Snowflake.Orchestration.Extensibility.IEmulatedPortDeviceEntry)">
            <summary>
            Checks if the <see cref="T:Snowflake.Input.Device.IInputDeviceInstance"/> specified by the given
            <see cref="T:Snowflake.Orchestration.Extensibility.IEmulatedPortDeviceEntry"/> is connected to the system.
            </summary>
            <param name="this">The <see cref="T:Snowflake.Services.IDeviceEnumerator"/> to use.</param>
            <param name="portDevice">The <see cref="T:Snowflake.Orchestration.Extensibility.IEmulatedPortDeviceEntry"/> to check if connected.</param>
            <returns>Whether or not the given <see cref="T:Snowflake.Orchestration.Extensibility.IEmulatedPortDeviceEntry"/> is connected.</returns>
        </member>
        <member name="M:Snowflake.Orchestration.Extensibility.Extensions.DeviceEnumeratorExtensions.GetPortDeviceInstance(Snowflake.Services.IDeviceEnumerator,Snowflake.Orchestration.Extensibility.IEmulatedPortDeviceEntry)">
            <summary>
            Gets the <see cref="T:Snowflake.Input.Device.IInputDeviceInstance"/> specifid by the given <see cref="T:Snowflake.Orchestration.Extensibility.IEmulatedPortDeviceEntry"/> 
            if it is connected to the system, or null if it does not.
            </summary>
            <param name="this">The <see cref="T:Snowflake.Services.IDeviceEnumerator"/> to use.</param>
            <param name="portDevice">The <see cref="T:Snowflake.Orchestration.Extensibility.IEmulatedPortDeviceEntry"/> to check if connected.</param>
            <returns>The <see cref="T:Snowflake.Input.Device.IInputDeviceInstance"/> specifid by the given <see cref="T:Snowflake.Orchestration.Extensibility.IEmulatedPortDeviceEntry"/> 
            if it is connected to the system, or null if it does not.</returns>
        </member>
        <member name="M:Snowflake.Orchestration.Extensibility.Extensions.DeviceEnumeratorExtensions.GetPortDevice(Snowflake.Services.IDeviceEnumerator,Snowflake.Orchestration.Extensibility.IEmulatedPortDeviceEntry)">
            <summary>
            Gets the <see cref="T:Snowflake.Input.Device.IInputDevice"/> specifid by the given <see cref="T:Snowflake.Orchestration.Extensibility.IEmulatedPortDeviceEntry"/> 
            if it is connected to the system, or null if it does not.
            </summary>
            <param name="this">The <see cref="T:Snowflake.Services.IDeviceEnumerator"/> to use.</param>
            <param name="portDevice">The <see cref="T:Snowflake.Orchestration.Extensibility.IEmulatedPortDeviceEntry"/> to check if connected.</param>
            <returns>The <see cref="T:Snowflake.Input.Device.IInputDevice"/> specifid by the given <see cref="T:Snowflake.Orchestration.Extensibility.IEmulatedPortDeviceEntry"/> 
            if it is connected to the system, or null if it does not.</returns>
        </member>
        <member name="M:Snowflake.Orchestration.Process.ProcessExtensions.WaitForExitAsync(System.Diagnostics.Process,System.Threading.CancellationToken)">
            <summary>
            Waits asynchronously for the process to exit.
            
            </summary>
            <param name="process">The process to wait for cancellation.</param>
            <param name="cancellationToken">A cancellation token. If invoked, the task will return 
            immediately as canceled.</param>
            <returns>A Task representing waiting for the process to end.</returns>
            https://stackoverflow.com/questions/36545858/process-waitforexitint32-asynchronously
        </member>
        <member name="M:Snowflake.Orchestration.Saving.GameFileExtensionGameSaveManagerExtensions.WithSaves(Snowflake.Model.Game.LibraryExtensions.IGameFileExtension)">
            <summary>
            Provides access to save game management
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="P:Snowflake.Scraping.Extensibility.Culler.TargetType">
            <inheritdoc />
        </member>
        <member name="M:Snowflake.Scraping.Extensibility.Culler.Filter(System.Collections.Generic.IEnumerable{Snowflake.Scraping.ISeed},Snowflake.Scraping.ISeedRootContext)">
            <inheritdoc />
        </member>
        <member name="T:Snowflake.Scraping.Extensibility.SeedBuilder">
            <summary>
            <para>
            Provides helper methods for building <see cref="T:Snowflake.Scraping.Extensibility.SeedTree"/>
            for use in <see cref="T:Snowflake.Scraping.Extensibility.IScraper"/> implementations.
            </para>
            <para>
            Enables use of underscore methods for "SeedBuilder syntax".
            Import this class with a <code>using static</code> directive.
            </para>
            <para>
            <seealso cref="M:Snowflake.Scraping.Extensibility.SeedBuilder._(Snowflake.Scraping.Extensibility.SeedTree[])"/> to continue for nested seeds.
            </para>
            <para>
            Remember that top-level seeds can be <seealso cref="T:System.Threading.Tasks.Task`1"/> and other awaitables.
            </para>
            </summary>
        </member>
        <member name="M:Snowflake.Scraping.Extensibility.SeedBuilder.WithSeeds(Snowflake.Scraping.Extensibility.SeedTree[])">
            <summary>
            Continues a seed tree result with a list of nested results.
            Nested seeds can not be awaitable, but can be returned from an asynchronous context.
            Use Seed Builder Syntax rather than the full call.
            </summary>
            <param name="children">The list of seed results to return</param>
            <returns>The nested portion of a seed tree result.</returns>
        </member>
        <member name="M:Snowflake.Scraping.Extensibility.SeedBuilder._(Snowflake.Scraping.Extensibility.SeedTree[])">
            <summary>
            Continues a seed tree result with multiple nested seeds.
            </summary>
            <param name="children">The list of seed results to return</param>
            <returns>The nested portion of a seed tree result.</returns>
        </member>
        <member name="P:Snowflake.Scraping.GameScrapeContext.Scrapers">
            <inheritdoc />
        </member>
        <member name="P:Snowflake.Scraping.GameScrapeContext.Context">
            <inheritdoc />
        </member>
        <member name="P:Snowflake.Scraping.GameScrapeContext.Cullers">
            <inheritdoc />
        </member>
    </members>
</doc>
