// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../../seamless-immutable

import * as Immutable from 'seamless-immutable';

export default class Snowflake {
    constructor(rootUrl?: string);
    readonly games: Games;
    readonly stone: Stone;
    readonly emulators: Emulators;
}

export interface Game {
    Files: File[];
    Guid: string;
    Metadata: {
        [key: string]: Metadata;
    };
    PlatformID: string;
    Title: string;
}
export interface File {
    FilePath: string;
    Guid: string;
    Metadata: {
        [key: string]: Metadata;
    };
    MimeType: string;
    Record: string;
}
export interface Metadata {
    Guid: string;
    Key: string;
    Record: string;
    Value: string;
}
export class Games extends Service {
    constructor(rootUrl: string);
    getGames: () => Promise<{
        [gameGuid: string]: Game;
    }>;
    getGame: (uuid: string) => Promise<Game>;
    createGame: (title: string, platform: Platform) => Promise<Game>;
    createFile: (gameGuid: string, path: string, mimetype: string) => Promise<Game & Immutable.ImmutableObject<Game>>;
    getConfigurations: (gameGuid: string, profileName?: string) => Promise<{
        [emulatorName: string]: ConfigurationCollection;
    } & Immutable.ImmutableObject<{
        [emulatorName: string]: ConfigurationCollection;
    }>>;
    getEmulatorConfigurations: (gameGuid: string, profileName: string, emulator: string) => Promise<ConfigurationCollection & Immutable.ImmutableObject<ConfigurationCollection>>;
    setEmulatorConfigurationValue: (gameGuid: string, profileName: string, emulator: string, newValue: ConfigurationValue) => Promise<ConfigurationCollection & Immutable.ImmutableObject<ConfigurationCollection>>;
    setEmulatorConfigurationValues: (gameGuid: string, profileName: string, emulator: string, newValues: ConfigurationValue[]) => Promise<ConfigurationCollection & Immutable.ImmutableObject<ConfigurationCollection>>;
}

export interface Platform {
    PlatformID: string;
    Metadata: {
        [key: string]: string;
    };
    MaximumInputs: number;
    FriendlyName: string;
    FileTypes: {
        [key: string]: string;
    };
}
export class Stone extends Service {
    constructor(rootUrl: string);
    getPlatforms: () => Promise<{
        [platformID: string]: Platform;
    }>;
}

export class Emulators extends Service {
    constructor(rootUrl: string);
    getConfiguration: (emulatorName: string, gameUuid: string) => Promise<ConfigurationCollection>;
}

export type ErrorCode = 400 | 401 | 403 | 404 | 405 | 415 | 500 | 501 | 502 | 503;
export type OKCode = 200 | 201 | 202 | 204 | 205;
export interface Response<T> {
    Response: T;
    Status: {
        Message: string;
        Type: string;
        Code: OKCode | ErrorCode;
    };
}
export class Service {
    protected rootUrl: string;
    protected serviceName: string;
    protected constructor(rootUrl: string, serviceName: string);
    protected getServiceUrl: (...path: string[]) => string;
}
export type Verb = 'Create' | 'Read' | 'Delete' | 'Update';
export const request: <T>(url: string, payload?: any, verb?: Verb) => Promise<Response<T>>;

export type ConfigurationOptionType = 'integer' | 'boolean' | 'decimal' | 'selection' | 'string';
export interface ConfigurationValue {
    Value: number | boolean | string;
    Guid: string;
}
export interface ConfigurationDescriptor {
    Default: number | boolean | string;
    Description: string;
    DisplayName: string;
    Simple: boolean;
    Type: ConfigurationOptionType;
    Min?: number;
    Max?: number;
    Increment?: number;
}
export interface ConfigurationSelection {
    DisplayName: string;
    Private: boolean;
}
export interface ConfigurationOption {
    Value: ConfigurationValue;
    Descriptor: ConfigurationDescriptor;
    Selection?: ConfigurationSelection;
}
export interface ConfigurationSectionDescriptor {
    Description: string;
    DisplayName: string;
    SectionName: string;
}
export interface ConfigurationSection {
    Configuration: {
        [OptionName: string]: ConfigurationOption;
    };
    Descriptor: ConfigurationSectionDescriptor;
}
export interface ConfigurationCollection {
    [SectionName: string]: ConfigurationSection;
}
export class Configuration extends Service {
    constructor(rootUrl: string);
}

