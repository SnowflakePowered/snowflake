// Generated by dts-bundle v0.7.2
// Dependencies for this module:
//   ../../seamless-immutable

import * as Immutable from 'seamless-immutable';

export default class Snowflake {
    constructor(rootUrl?: string);
    readonly games: Games;
    readonly stone: Stone;
}

export interface Game {
    Files: File[];
    Guid: string;
    Metadata: {
        [key: string]: Metadata;
    };
    PlatformId: string;
    Title: string;
}
export interface File {
    FilePath: string;
    Guid: string;
    Metadata: {
        [key: string]: Metadata;
    };
    MimeType: string;
    Record: string;
}
export interface Metadata {
    Guid: string;
    Key: string;
    Record: string;
    Value: string;
}
export class Games extends Service {
    constructor(rootUrl: string);
    getGames: () => Promise<Iterable<Game>>;
    getGame: (uuid: string) => Promise<Game>;
    createGame: (title: string, platform: Platform) => Promise<Game>;
    createFile: (game: Game, path: string, mimetype: string) => Promise<Game & Immutable.ImmutableObject<Game>>;
}

export interface Platform {
    PlatformID: string;
    Metadata: {
        [key: string]: string;
    };
    MaximumInputs: number;
    FriendlyName: string;
    FileTypes: {
        [key: string]: string;
    };
}
export class Stone extends Service {
    constructor(rootUrl: string);
    getPlatforms: () => Promise<Map<string, Platform>>;
}

import 'whatwg-fetch';
export interface Response<T> {
    Response: T;
    Error: Error;
}
export interface Error {
    Message?: string;
}
export class Service {
    protected rootUrl: string;
    protected serviceName: string;
    protected constructor(rootUrl: string, serviceName: string);
    protected getServiceUrl: (...path: string[]) => string;
}
export type Verb = 'Create' | 'Read' | 'Delete' | 'Update';
export const request: <T>(url: string, payload?: any, verb?: Verb) => Promise<Response<T>>;

