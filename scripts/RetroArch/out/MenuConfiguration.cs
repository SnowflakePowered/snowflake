using Snowflake.Configuration;
using Snowflake.Configuration.Attributes;
using Snowflake.Plugin.EmulatorAdapter.RetroArch.Selections;

//autogenerated using generate_retroarch.py
namespace Snowflake.Plugin.EmulatorAdapter.RetroArch.Configuration.Internal
{
    /// <summary>
    /// The menu is completely disabled when running through Snowflake.
    /// We can not disable it completely (menu driver null), but we can hide it by disabling the menu toggle.
    /// 
    /// Frankly the retro arch GUI is an abomination, and any inconvienience delivered by removing it is offset
    /// by the simplicity of only exposing core settings using "Simple".
    /// </summary>
   [ConfigurationSection("menu", "Menu Options")]
 public interface MenuConfiguration : IConfigurationSection<MenuConfiguration>
    {
       
        [ConfigurationOption("dpi_override_enable",true, DisplayName = "Dpi Override Enable", Private = true)]
        bool DpiOverrideEnable { get; set; }
        //todo check max
        [ConfigurationOption("dpi_override_value",200, DisplayName = "Dpi Override Value", Private = true)]
        int DpiOverrideValue { get; set; }

        [ConfigurationOption("custom_bgm_enable",false, DisplayName = "Custom Bgm Enable", Private = true)]
        bool CustomBgmEnable { get; set; }
        [ConfigurationOption("history_list_enable",true, DisplayName = "History List Enable", Private = true)]
        bool HistoryListEnable { get; set; }
        [ConfigurationOption("content_history_size",100, DisplayName = "Content History Size", Private = true)]
        int ContentHistorySize { get; set; }
        [ConfigurationOption("back_as_menu_toggle_enable",true, DisplayName = "Back As Menu Toggle Enable", Private = true)]
        bool BackAsMenuToggleEnable { get; set; }
        [ConfigurationOption("menu_cancel_btn",0, DisplayName = "Menu Cancel Btn", Private = true)]
        int MenuCancelBtn { get; set; }
        [ConfigurationOption("menu_core_enable",false, DisplayName = "Menu Core Enable", Private = true)]
        bool MenuCoreEnable { get; set; }
        [ConfigurationOption("menu_default_btn",3, DisplayName = "Menu Default Btn", Private = true)]
        int MenuDefaultBtn { get; set; }

        [ConfigurationOption("menu_driver",MenuDriver.RGUI, DisplayName = "Menu Driver", Private = true)]
        MenuDriver MenuDriver { get; set; }

        [ConfigurationOption("menu_dynamic_wallpaper_enable",false, DisplayName = "Menu Dynamic Wallpaper Enable", Private = true)]
        bool MenuDynamicWallpaperEnable { get; set; }
        [ConfigurationOption("menu_entry_hover_color","ff64ff64", DisplayName = "Menu Entry Hover Color", Private = true)]
        string MenuEntryHoverColor { get; set; }
        [ConfigurationOption("menu_entry_normal_color","ffffffff", DisplayName = "Menu Entry Normal Color", Private = true)]
        string MenuEntryNormalColor { get; set; }
        [ConfigurationOption("menu_info_btn",2, DisplayName = "Menu Info Btn", Private = true)]
        int MenuInfoBtn { get; set; }
        [ConfigurationOption("menu_linear_filter",true, DisplayName = "Menu Linear Filter", Private = true)]
        bool MenuLinearFilter { get; set; }
        [ConfigurationOption("menu_mouse_enable",false, DisplayName = "Menu Mouse Enable", Private = true)]
        bool MenuMouseEnable { get; set; }
        [ConfigurationOption("menu_navigation_browser_filter_supported_extensions_enable",true, DisplayName = "Menu Navigation Browser Filter Supported Extensions Enable", Private = true)]
        bool MenuNavigationBrowserFilterSupportedExtensionsEnable { get; set; }
        [ConfigurationOption("menu_navigation_wraparound_enable",true, DisplayName = "Menu Navigation Wraparound Enable", Private = true)]
        bool MenuNavigationWraparoundEnable { get; set; }
        [ConfigurationOption("menu_ok_btn",8, DisplayName = "Menu Ok Btn", Private = true)]
        int MenuOkBtn { get; set; }
        [ConfigurationOption("menu_pause_libretro",true, DisplayName = "Menu Pause Libretro", Private = true)]
        bool MenuPauseLibretro { get; set; }
        [ConfigurationOption("menu_pointer_enable",false, DisplayName = "Menu Pointer Enable", Private = true)]
        bool MenuPointerEnable { get; set; }
        [ConfigurationOption("menu_scroll_down_btn",11, DisplayName = "Menu Scroll Down Btn", Private = true)]
        int MenuScrollDownBtn { get; set; }
        [ConfigurationOption("menu_scroll_up_btn",10, DisplayName = "Menu Scroll Up Btn", Private = true)]
        int MenuScrollUpBtn { get; set; }
        [ConfigurationOption("menu_search_btn",9, DisplayName = "Menu Search Btn", Private = true)]
        int MenuSearchBtn { get; set; }
        [ConfigurationOption("menu_show_advanced_settings",true, DisplayName = "Menu Show Advanced Settings", Private = true)]
        bool MenuShowAdvancedSettings { get; set; }
        [ConfigurationOption("menu_throttle_framerate",true, DisplayName = "Menu Throttle Framerate", Private = true)]
        bool MenuThrottleFramerate { get; set; }
        [ConfigurationOption("menu_thumbnails",0, DisplayName = "Menu Thumbnails", Private = true)]
        int MenuThumbnails { get; set; }
        [ConfigurationOption("menu_timedate_enable",true, DisplayName = "Menu Timedate Enable", Private = true)]
        bool MenuTimedateEnable { get; set; }
        [ConfigurationOption("menu_title_color","ff64ff64", DisplayName = "Menu Title Color", Private = true)]
        string MenuTitleColor { get; set; }
        [ConfigurationOption("menu_wallpaper","", DisplayName = "Menu Wallpaper", Private = true)]
        string MenuWallpaper { get; set; }
        [ConfigurationOption("playlist_cores","", DisplayName = "Playlist Cores", Private = true)]
        string PlaylistCores { get; set; }
        [ConfigurationOption("playlist_names","", DisplayName = "Playlist Names", Private = true)]
        string PlaylistNames { get; set; }

        [ConfigurationOption("rgui_show_start_screen",false, DisplayName = "Rgui Show Start Screen", Private = true)]
        bool RguiShowStartScreen { get; set; }

        [ConfigurationOption("sort_savefiles_enable",false, DisplayName = "Enable savefile sorting", Private = true)]
        bool SortSavefilesEnable { get; set; }

        [ConfigurationOption("sort_savestates_enable",false, DisplayName = "Sort Savestates Enable", Private = true)]
        bool SortSavestatesEnable { get; set; }
        [ConfigurationOption("suspend_screensaver_enable",true, DisplayName = "Suspend Screensaver Enable", Private = true)]
        bool SuspendScreensaverEnable { get; set; }

    }
}

