using Snowflake.Configuration;
using Snowflake.Configuration.Attributes;

//autogenerated using generate_retroarch.py

namespace Snowflake.Plugin.Emulators.RetroArch.Configuration
{
    [ConfigurationSection("directory", "Directory Options")]
    public interface DirectoryConfiguration : IConfigurationSection<DirectoryConfiguration>
    {
        [ConfigurationOption("assets_directory", "default", DisplayName = "Assets Directory", IsPath = true,
            Private = true)]
        string AssetsDirectory { get; set; }

        [ConfigurationOption("audio_filter_dir", "default", DisplayName = "Audio Filter Dir", IsPath = true,
            Private = true)]
        string AudioFilterDir { get; set; }

        [ConfigurationOption("bundle_assets_dst_path", "", DisplayName = "Bundle Assets Dst Path", IsPath = true,
            Private = true)]
        string BundleAssetsDstPath { get; set; }

        [ConfigurationOption("bundle_assets_dst_path_subdir", "", DisplayName = "Bundle Assets Dst Path Subdir",
            IsPath = true, Private = true)]
        string BundleAssetsDstPathSubdir { get; set; }

        [ConfigurationOption("bundle_assets_src_path", "", DisplayName = "Bundle Assets Src Path", IsPath = true,
            Private = true)]
        string BundleAssetsSrcPath { get; set; }

        [ConfigurationOption("cache_directory", "", DisplayName = "Cache Directory", IsPath = true, Private = true)]
        string CacheDirectory { get; set; }

        [ConfigurationOption("cheat_database_path", "", DisplayName = "Cheat Database Path", IsPath = true,
            Private = true)]
        string CheatDatabasePath { get; set; }

        [ConfigurationOption("content_database_path", "", DisplayName = "Content Database Path", IsPath = true,
            Private = true)]
        string ContentDatabasePath { get; set; }

        [ConfigurationOption("content_history_dir", "", DisplayName = "Content History Dir", IsPath = true,
            Private = true)]
        string ContentHistoryDir { get; set; }

        [ConfigurationOption("content_history_path", ":\\content_history.lpl", DisplayName = "Content History Path",
            IsPath = true, Private = true)]
        string ContentHistoryPath { get; set; }

        [ConfigurationOption("core_assets_directory", "default", DisplayName = "Core Assets Directory", IsPath = true,
            Private = true)]
        string CoreAssetsDirectory { get; set; }

        [ConfigurationOption("core_options_path", "", DisplayName = "Core Options Path", IsPath = true, Private = true)]
        string CoreOptionsPath { get; set; }

        [ConfigurationOption("cursor_directory", "", DisplayName = "Cursor Directory", IsPath = true, Private = true)]
        string CursorDirectory { get; set; }

        [ConfigurationOption("dynamic_wallpapers_directory", "default", DisplayName = "Dynamic Wallpapers Directory",
            IsPath = true, Private = true)]
        string DynamicWallpapersDirectory { get; set; }

        [ConfigurationOption("input_remapping_directory", "", DisplayName = "Input Remapping Directory", IsPath = true,
            Private = true)]
        string InputRemappingDirectory { get; set; }

        [ConfigurationOption("joypad_autoconfig_dir", "", DisplayName = "Joypad Autoconfig Dir", IsPath = true,
            Private = true)]
        string JoypadAutoconfigDir { get; set; }

        [ConfigurationOption("libretro_directory", "", DisplayName = "Libretro Directory", IsPath = true, Private = true
            )]
        string LibretroDirectory { get; set; }

        [ConfigurationOption("libretro_info_path", "", DisplayName = "Libretro Info Path", IsPath = true, Private = true
            )]
        string LibretroInfoPath { get; set; }

        [ConfigurationOption("osk_overlay_directory", "default", DisplayName = "Osk Overlay Directory", IsPath = true,
            Private = true)]
        string OskOverlayDirectory { get; set; }

        [ConfigurationOption("overlay_directory", "default", DisplayName = "Overlay Directory", IsPath = true,
            Private = true)]
        string OverlayDirectory { get; set; }

        [ConfigurationOption("playlist_directory", "default", DisplayName = "Playlist Directory", IsPath = true,
            Private = true)]
        string PlaylistDirectory { get; set; }

        [ConfigurationOption("recording_config_directory", "", DisplayName = "Recording Config Directory", IsPath = true,
            Private = true)]
        string RecordingConfigDirectory { get; set; }

        [ConfigurationOption("recording_output_directory", "", DisplayName = "Recording Output Directory", IsPath = true,
            Private = true)]
        string RecordingOutputDirectory { get; set; }

        [ConfigurationOption("resampler_directory", "", DisplayName = "Resampler Directory", IsPath = true,
            Private = true)]
        string ResamplerDirectory { get; set; }

        [ConfigurationOption("rgui_browser_directory", "default", DisplayName = "Rgui Browser Directory", IsPath = true,
            Private = true)]
        string RguiBrowserDirectory { get; set; }

        [ConfigurationOption("rgui_config_directory", "default", DisplayName = "Rgui Config Directory", IsPath = true,
            Private = true)]
        string RguiConfigDirectory { get; set; }

        [ConfigurationOption("screenshot_directory", "default", DisplayName = "Screenshot Directory", IsPath = true,
            Private = true)]
        string ScreenshotDirectory { get; set; }

        [ConfigurationOption("system_directory", "default", DisplayName = "System Directory", IsPath = true,
            Private = true)]
        string SystemDirectory { get; set; }

        [ConfigurationOption("savefile_directory", "default", DisplayName = "Savefile Directory")]
        string SavefileDirectory { get; set; }

        [ConfigurationOption("thumbnails_directory", "default", DisplayName = "Thumbnails Directory", IsPath = true,
            Private = true)]
        string ThumbnailsDirectory { get; set; }

        [ConfigurationOption("video_filter_dir", "default", DisplayName = "Video Filter Dir", IsPath = true,
            Private = true)]
        string VideoFilterDir { get; set; }

        [ConfigurationOption("video_font_path", "", DisplayName = "Video Font Path", IsPath = true, Private = true)]
        string VideoFontPath { get; set; }

        [ConfigurationOption("video_shader_dir", "default", DisplayName = "Video Shader Dir", IsPath = true,
            Private = true)]
        string VideoShaderDir { get; set; }

        [ConfigurationOption("savestate_directory", "default", DisplayName = "Savestate Directory", IsPath = true,
            Private = true)]
        string SavestateDirectory { get; set; }
    }
}